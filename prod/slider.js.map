{"version":3,"sources":["utilities/utilities.js","SliderModel.js","SliderAdapter.js","SliderUI.js","SliderFactory.js","slider.js"],"names":["setElementPosition","element","position","property","style","setElementTextContent","value","textContent","setElementsPosition","elements","positions","forEach","call","setElementsTextContent","values","callback","flag","i","observerMixin","addSubscriber","eventName","subscriber","_eventSubscribers","push","removeSubscriber","subscribers","item","splice","triggerSubscribers","args","apply","getPositionInPercentageOf","range","start","end","isValueInBetween","NaN","result","Math","trunc","toFixed","translateProportionIntoValue","proportion","difference","isValueBetween","Array","from","arguments","includes","isDivisible","dividend","divisor","getNearestTo","Number","isFinite","filteredArray","filter","length","reduce","prev","current","currentDifference","abs","getNearestDivisibleOf","round","getNextDivisibleOf","ceil","undefined","getPrevDivisibleOf","floor","getClosestFactorOf","getOverstepOf","step","overstep","isNaN","getAverageOf","arr","sum","SliderModel","options","_options","boundaries","orientation","hasTooltips","setValues","Object","defineProperties","writable","_boundaries","_values","_step","_orientation","_hasTooltips","keys","key","getValues","slice","filteredValue","parseFloat","isArray","sort","a","b","of","currentValues","newValues","concat","filteredArr","closestValue","closestValuePosition","indexOf","SliderAdapter","dataSource","newOptions","assign","prototype","SliderUI","$parent","sliderAdapter","_paint","getOptions","map","_updateHandleGroups","_updateTooltips","innerHTML","_createTemplate","$slider","querySelector","$base","$handleGroups","_getHandleGroups","$tooltips","_getTooltips","update","_addEventListeners","str","querySelectorAll","$handleGroup","onmousedown","_onMouseDown","bind","_triggerModel","onMouseDownEvent","_triggerModelBound","event","_onMouseUpBound","_onMouseUp","document","addEventListener","removeEventListener","preventDefault","clientX","getBoundingClientRect","left","clientY","top","width","height","newValue","_calcValue","onMouseDownEventTarget","target","onMouseDownEventTargetIndex","findIndex","contains","sliderFactory","createModel","createAdapter","createUI","slider","_factory","_parentsMap","WeakMap","create","sliderModel","sliderUi","sliderUiBoundedUpdate","set","get","setOptions"],"mappings":"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","file":"slider.js","sourceRoot":"..\\src","sourcesContent":["export function setElementPosition(element, position, property = \"left\") {\r\n  element.style[property] = position;\r\n\r\n  return element;\r\n}\r\n\r\n\r\nexport function setElementTextContent(element, value) {\r\n  element.textContent = value;\r\n\r\n  return element;\r\n}\r\n\r\n\r\nexport function setElementsPosition(elements, positions, property) {\r\n  elements.forEach(\r\n    call(setElementPosition, positions, property)\r\n  );\r\n}\r\n\r\n\r\nexport function setElementsTextContent(elements, values) {\r\n  elements.forEach(\r\n    call(setElementTextContent, values)\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * A wrapper function, that is used alongwith Array.prototype.forEach method.\r\n * It calls callback function on each element of the array, passing item\r\n * of the values array on each iteration.\r\n *\r\n * @param {function} callback The function, to be called on each element\r\n * of the array.\r\n * @param {array} values The values, to be passed to the callback\r\n * on each iteration.\r\n * @param {any} flag The argument, which is the same for each callback call.\r\n */\r\n\r\nexport function call(callback, values, flag) {\r\n\r\n  return (element, i) => {\r\n    const value = values[i];\r\n\r\n    callback(element, value, flag);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * The observerMixin is a modification of eventMixin,\r\n * borrowed from http://javascript.info/mixins\r\n */\r\n\r\nexport let observerMixin = {\r\n\r\n  /**\r\n   * Subscribe to event, usage:\r\n   *  menu.addSubscriber( \"select\", function(item) { ... } ),\r\n   *  menu.addSubscriber( \"select\", obj.method(item) { ... }.bind(obj) )\r\n   *\r\n   * @param {string} eventName The name of an event to listen to.\r\n   * @param {function} subscriber The subscriber to be triggered on the event.\r\n   */\r\n\r\n  addSubscriber(eventName, subscriber) {\r\n    if (!this._eventSubscribers) {\r\n      this._eventSubscribers = {};\r\n    }\r\n\r\n    if (!this._eventSubscribers[eventName]) {\r\n      this._eventSubscribers[eventName] = [];\r\n    }\r\n\r\n    this._eventSubscribers[eventName].push(subscriber);\r\n  },\r\n\r\n\r\n  /**\r\n   * Cancel the subscription, usage:\r\n   *  menu.removeSubscriber(\"select\", subscriber)\r\n   *\r\n   * @param {string} eventName The name of an event to which subscriber is listen to.\r\n   * @param {function} subscriber The subscriber to be removed from the list.\r\n   */\r\n\r\n  removeSubscriber(eventName, subscriber) {\r\n    let subscribers = this._eventSubscribers && this._eventSubscribers[eventName];\r\n\r\n    if (!subscribers) return;\r\n\r\n    subscribers.forEach( (item, i) => {\r\n      if (item !== subscriber) return;\r\n\r\n      subscribers.splice(i--, 1);\r\n    });\r\n  },\r\n\r\n\r\n  /**\r\n   * Generate an event with the given name and data\r\n   *  this.triggerSubscribers(\"select\", data1, data2);\r\n   *\r\n   * @param {string} eventName The name of an event to trigger.\r\n   * @param {any} arg1...args The data to be passed to subscribers.\r\n   */\r\n\r\n  triggerSubscribers(eventName, ...args) {\r\n    let subscribers = this._eventSubscribers && this._eventSubscribers[eventName];\r\n\r\n    if (!subscribers) return;\r\n\r\n    subscribers.forEach( (subscriber) => subscriber.apply(this, args) );\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Returns position of the value in the range in percentages, if it's possible.\r\n * Otherwise, returns NaN\r\n *\r\n * @param {number} value The value, which position to be calculated.\r\n * @param {number[]} range The range, whick value is compared to.\r\n * @returns {number} The position of the value in percentages.\r\n */\r\n\r\nexport function getPositionInPercentageOf(value, range) {\r\n  let [start, end] = range;\r\n\r\n  if (start > end) {\r\n    [start, end] = [end, start];\r\n  }\r\n\r\n  if ( !isValueInBetween(value, start, end) ) {\r\n    return NaN;\r\n  }\r\n\r\n  let difference = end - start;\r\n\r\n  value = value - start;\r\n\r\n  let result = value / difference * 100;\r\n\r\n  return `${( result - Math.trunc(result) ) ? result.toFixed(5) : result}%`;\r\n}\r\n\r\n\r\nexport function translateProportionIntoValue(proportion, range) {\r\n  let [start, end] = range;\r\n\r\n  if (start > end) {\r\n    [start, end] = [end, start];\r\n  }\r\n\r\n  const difference = end - start;\r\n\r\n  proportion = proportion / 100;\r\n\r\n  return difference * proportion + start;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Defines whether value is between start and end or not.\r\n *\r\n * @param {number} value The value, which is checked for attachment to interval.\r\n * @param {number} start The start of the interval.\r\n * @param {number} end The end of the interval.\r\n * @returns {boolean} True, if value is between start and end, false otherwise.\r\n */\r\n\r\nexport function isValueBetween(value, start, end) {\r\n  if ( Array.from(arguments).includes(null) ) return false;\r\n\r\n  if (start > end) {\r\n    [start, end] = [end, start];\r\n  }\r\n\r\n  return (value > start) && (value < end);\r\n}\r\n\r\n\r\n/**\r\n * Defines whether value is between start and end, including the edges, or not.\r\n *\r\n * @param {number} value The value, which is checked for attachment to interval.\r\n * @param {number} start The start of the interval.\r\n * @param {number} end The end of the interval.\r\n * @returns {boolean} True, if value is between start and end, including the edges, false otherwise.\r\n */\r\n\r\nexport function isValueInBetween(value, start, end) {\r\n  if ( [].includes.call(arguments, null) ) return false;\r\n\r\n  if (start > end) {\r\n    [start, end] = [end, start];\r\n  }\r\n\r\n  return (value >= start) && (value <= end);\r\n}\r\n\r\n\r\n/**\r\n * Defines whether dividend can be divided by divisor without the remainder or not.\r\n *\r\n * @param {number} dividend The number, that to be divided.\r\n * @param {number} divisor The number, that divides the dividend.\r\n * @param {number} start The number which to start to counting from.\r\n * @returns {boolean} True, if dividend can be divided by divisor without the remainder. Otherwise, false.\r\n */\r\n\r\nexport function isDivisible(dividend, divisor, start = 0) {\r\n  return (dividend - start) % divisor === 0;\r\n}\r\n\r\n\r\n/**\r\n * If this can be done, returns the number that is nearest to the value.\r\n * Otherwise, returns NaN.\r\n *\r\n * @param {number} value The value, which nearest number is compared to.\r\n * @param {number} args The number, that is compared to the value.\r\n * @returns {number} The nearest number to the value.\r\n * @returns {NaN} Error.\r\n */\r\n\r\nexport function getNearestTo(value, ...args) {\r\n  if ( !Number.isFinite(value) ) return NaN;\r\n\r\n  let filteredArray = args.filter( item => Number.isFinite(item) );\r\n\r\n  if (!filteredArray.length) return NaN;\r\n\r\n  let result = filteredArray.reduce( (prev, current) => {\r\n    let currentDifference = Math.abs(value - current);\r\n    let prevDifference = Math.abs(value - prev);\r\n\r\n    return (currentDifference <= prevDifference) ? current : prev;\r\n  });\r\n\r\n  return Number.isFinite(result) ? result : NaN;\r\n}\r\n\r\n\r\n/**\r\n * If this can be done, returns the nearest number (the bigger one, if controvertial)\r\n * that can be divided by divisor without the remainder.\r\n * Otherwise, returns NaN.\r\n *\r\n * @param {number} dividend The number, that to be divided.\r\n * @param {number} divisor The number, that divides the dividend.\r\n * @param {number} start The number which to start to counting from.\r\n * @returns {number} The nearest number, that can be divided by divisor without the remainder.\r\n */\r\n\r\nexport function getNearestDivisibleOf(dividend, divisor, start = 0) {\r\n  divisor = Math.abs(divisor);\r\n  dividend -= start;\r\n\r\n  let result = Math.round(dividend / divisor) * divisor + start;\r\n\r\n  return isFinite(result) ? result : NaN;\r\n}\r\n\r\nexport function getNextDivisibleOf(dividend, divisor, start = 0) {\r\n  divisor = Math.abs(divisor);\r\n  dividend -= start;\r\n\r\n  let result = Math.ceil(dividend / divisor) * divisor + start;\r\n\r\n  return isFinite(result) ? result : undefined;\r\n}\r\n\r\nexport function getPrevDivisibleOf(dividend, divisor, start = 0) {\r\n  divisor = Math.abs(divisor);\r\n  dividend -= start;\r\n\r\n  let result = Math.floor(dividend / divisor) * divisor + start;\r\n\r\n  return isFinite(result) ? result : undefined;\r\n}\r\n\r\n\r\n/**\r\n * If this can be done, returns the closest factor (natural number (positive integer))\r\n * of the dividend to the divisor (the bigger one, if controvertial).\r\n * Otherwise, returns NaN.\r\n *\r\n * @param {number} dividend The number, that to be divided.\r\n * @param {number} divisor The number, that divides the dividend.\r\n * @returns {natural number} The closest factor of the dividend to the divisor.\r\n */\r\n\r\nexport function getClosestFactorOf(dividend, divisor) {\r\n  if ( !Number.isFinite(dividend) || !Number.isFinite(divisor) || (dividend <= 0) ) return NaN;\r\n\r\n  if (divisor <= 0) return 1;\r\n\r\n  for (let i = 0; i < dividend; i++) {\r\n    if ( dividend % (divisor + i) === 0 ) {\r\n      return (divisor + i);\r\n    }\r\n\r\n    if ( dividend % (divisor - i) === 0 ) {\r\n      return (divisor - i);\r\n    }\r\n  }\r\n\r\n  return dividend;\r\n}\r\n\r\n\r\n/**\r\n * Returns excess over step, if this can be done,\r\n * taking into account starting point.\r\n * Otherwise, returns undefined.\r\n *\r\n * @param {number} value The number which step is compared with.\r\n * @param {number} step The number that represents a value of step.\r\n * @param {number} start The number which step starts to counting from.\r\n * @returns {number} The excess of value over step.\r\n * @returns {undefined} The Error of operation.\r\n */\r\n\r\nexport function getOverstepOf(value, step, start) {\r\n  start = isFinite(start) ? start : 0;\r\n\r\n  if ( (value < start) || !isFinite(step) ) return;\r\n\r\n  let overstep = (value - start) % step;\r\n\r\n  return isNaN(overstep) ? undefined : overstep;\r\n}\r\n\r\n\r\nexport function getAverageOf(arr) {\r\n  return arr.reduce( (sum, current) => sum + current, 0 ) / arr.length;\r\n}\r\n","import {getAverageOf, getNearestDivisibleOf, isValueBetween, getNearestTo, getClosestFactorOf} from \"./utilities/utilities.js\";\r\n\r\nexport class SliderModel {\r\n  // don't use object destructuring as\r\n  // I need to loop over an object\r\n  constructor(options = {}) {\r\n    // Assign default values directly in order\r\n    // to avoid their redundant pass through setters\r\n    this._options = {\r\n      boundaries: [0, 100],\r\n      values: null,\r\n      step: 1,\r\n      orientation: \"horizontal\",\r\n      hasTooltips: false,\r\n    };\r\n\r\n    this.setValues(options);\r\n\r\n    Object.defineProperties(this._options, {\r\n      orientation: {writable: false},\r\n      hasTooltips: {writable: false},\r\n    });\r\n  }\r\n\r\n  get _boundaries() {\r\n    return this._options.boundaries;\r\n  }\r\n  set _boundaries(value) {\r\n    let result = this._options.boundaries.slice();\r\n\r\n    if (typeof(value) === \"number\") {\r\n      let [start, end] = result;\r\n\r\n      let filteredValue = parseFloat(value);\r\n\r\n      if ( isNaN(filteredValue) ) return;\r\n\r\n      result = ( getNearestTo(filteredValue, start, end) === start ) ?\r\n        [filteredValue, end] : [start, filteredValue];\r\n    }\r\n\r\n    if ( Array.isArray(value) ) {\r\n\r\n      for (let i = 0; i < result.length; i++) {\r\n        let filteredValue = parseFloat( value[i] );\r\n\r\n        if ( isNaN(filteredValue) ) continue;\r\n\r\n        result[i] = filteredValue;\r\n      }\r\n\r\n    }\r\n\r\n    this._options.boundaries = result.sort( (a, b) => a - b );\r\n\r\n    this._values = this._options.values;\r\n    this._step = this._options.step;\r\n  }\r\n\r\n  get _values() {\r\n    return this._options.values || Array.of( getAverageOf(this._options.boundaries) );\r\n  }\r\n  set _values(values) {\r\n    const currentValues = this._options.values && this._options.values.slice();\r\n    let newValues = [].concat(values);\r\n    let filteredArr = [];\r\n    let step = this._options.step;\r\n    let [start, end] = this._options.boundaries;\r\n\r\n    newValues.sort( (a, b) => a - b ).forEach(value => {\r\n      let filteredValue = parseFloat(value);\r\n\r\n      filteredValue = ( isValueBetween(filteredValue, start, end) ) ?\r\n        getNearestDivisibleOf(filteredValue, step, start) :\r\n        getNearestTo(filteredValue, start, end);\r\n\r\n      if ( isNaN(filteredValue) ) return;\r\n\r\n      filteredArr.push(filteredValue);\r\n    });\r\n\r\n    filteredArr = filteredArr.filter( (item, i, filteredArr) => item !== filteredArr[i + 1] );\r\n\r\n    if (!filteredArr.length) return;\r\n\r\n    if (!currentValues || filteredArr.length === currentValues.length) {\r\n      this._options.values = filteredArr;\r\n      return;\r\n    }\r\n\r\n    if (filteredArr.length > currentValues.length) {\r\n      filteredArr.length = currentValues.length;\r\n    } else {\r\n      filteredArr.forEach( (item) => {\r\n        const closestValue = getNearestTo(item, ...currentValues);\r\n        const closestValuePosition = currentValues.indexOf(closestValue);\r\n\r\n        currentValues.splice(closestValuePosition, 1, item);\r\n      });\r\n\r\n      filteredArr = currentValues;\r\n    }\r\n\r\n    this._options.values = filteredArr;\r\n  }\r\n\r\n  get _step() {\r\n    return this._options.step;\r\n  }\r\n  set _step(value) {\r\n    let [start, end] = this._options.boundaries;\r\n    let range = end - start;\r\n\r\n    let filteredValue = parseFloat(value);\r\n\r\n    filteredValue = ( isValueBetween(filteredValue, 1, range) ) ?\r\n      getClosestFactorOf(range, filteredValue) :\r\n      getNearestTo(filteredValue, 1, range);\r\n\r\n    if ( isNaN(filteredValue) ) return;\r\n\r\n    this._options.step = filteredValue;\r\n\r\n    this._values = this._options.values;\r\n  }\r\n\r\n  get _orientation() {\r\n    return this._options.orientation;\r\n  }\r\n  set _orientation(value) {\r\n    if (value !== \"horizontal\" && value !== \"vertical\") return;\r\n\r\n    this._options.orientation = value;\r\n  }\r\n\r\n  get _hasTooltips() {\r\n    return this._options.hasTooltips;\r\n  }\r\n  set _hasTooltips(value) {\r\n    if (value !== false && value !== true) return;\r\n\r\n    this._options.hasTooltips = value;\r\n  }\r\n\r\n  getValues() {\r\n\r\n    return {\r\n      boundaries: this._boundaries,\r\n      values: this._values,\r\n      step: this._step,\r\n      orientation: this._orientation,\r\n      hasTooltips: this._hasTooltips,\r\n    };\r\n\r\n  }\r\n\r\n  setValues(options) {\r\n    for ( let key of Object.keys(options) ) {\r\n      this[\"_\" + key] = options[key];\r\n    }\r\n\r\n    return this.getValues();\r\n  }\r\n\r\n}\r\n","import {observerMixin} from \"./utilities/utilities.js\";\r\n\r\nexport class SliderAdapter {\r\n  constructor(dataSource) {\r\n    this.dataSource = dataSource;\r\n  }\r\n\r\n  getOptions() {\r\n    return this.dataSource.getValues();\r\n  }\r\n\r\n  update(options) {\r\n    const newOptions = this.dataSource.setValues(options);\r\n\r\n    this.triggerSubscribers(\"update\", newOptions);\r\n  }\r\n}\r\n\r\nObject.assign(SliderAdapter.prototype, observerMixin);\r\n","import {getPositionInPercentageOf, translateProportionIntoValue, setElementsPosition, setElementsTextContent} from \"./utilities/utilities.js\";\r\n\r\nexport class SliderUI {\r\n\r\n  constructor($parent, sliderAdapter) {\r\n    this.$parent = $parent;\r\n    this.sliderAdapter = sliderAdapter;\r\n\r\n    this._paint( sliderAdapter.getOptions() );\r\n  }\r\n\r\n\r\n  update({boundaries, values, step, orientation, hasTooltips} = {}) {\r\n\r\n    if (values && boundaries) {\r\n      let positions = values.map( (value) => getPositionInPercentageOf(value, boundaries) );\r\n\r\n      this._updateHandleGroups(positions, orientation)\r\n      this._updateTooltips(values)\r\n    }\r\n\r\n  }\r\n\r\n\r\n  _paint(options) {\r\n    this.$parent.innerHTML = this._createTemplate(options);\r\n\r\n    this.$slider = this.$parent.querySelector(\".slider\");\r\n    this.$base = this.$parent.querySelector(\".slider__base\");\r\n    this.$handleGroups = this._getHandleGroups();\r\n    this.$tooltips = this._getTooltips();\r\n\r\n    this.update(options);\r\n    this._addEventListeners();\r\n  }\r\n\r\n\r\n  _createTemplate({boundaries, values, step, orientation, hasTooltips} = {}) {\r\n\r\n    return(\r\n      `<div class=\"slider ${(orientation === \"vertical\") ? \"slider_vertical\" : ''}\">\r\n        <div class=\"slider__base\">\r\n          ${values.reduce( (str) => {\r\n            return str +\r\n            `<div class=\"slider__handle-group\">\r\n              ${hasTooltips ? `<div class=\"slider__tooltip\"></div>` : ''}\r\n              <div class=\"slider__handle\"></div>\r\n            </div>`;\r\n          }, '')}\r\n        </div>\r\n      </div>`\r\n    );\r\n\r\n  }\r\n\r\n\r\n  _updateHandleGroups(positions, orientation) {\r\n    if (orientation === \"vertical\") {\r\n      setElementsPosition(this.$handleGroups, positions, \"top\");\r\n      return;\r\n    }\r\n\r\n    setElementsPosition(this.$handleGroups, positions);\r\n  }\r\n\r\n\r\n  _updateTooltips(values) {\r\n    setElementsTextContent(this.$tooltips, values);\r\n  }\r\n\r\n\r\n  _getHandleGroups() {\r\n    return Array.from(\r\n      this.$parent.querySelectorAll(\".slider__handle-group\")\r\n    );\r\n  }\r\n\r\n\r\n  _getTooltips() {\r\n    return Array.from(\r\n      this.$parent.querySelectorAll(\".slider__tooltip\")\r\n    );\r\n  }\r\n\r\n\r\n  _addEventListeners() {\r\n    this.$handleGroups.forEach( ($handleGroup) => {\r\n      $handleGroup.onmousedown = this._onMouseDown.bind(this);\r\n    });\r\n    this.$base.onmousedown = this._triggerModel.bind(this);\r\n  }\r\n\r\n\r\n  _onMouseDown(onMouseDownEvent) {\r\n    this._triggerModelBound =\r\n      (event) => this._triggerModel.call(this, event, onMouseDownEvent);\r\n    this._onMouseUpBound = this._onMouseUp.bind(this);\r\n\r\n    document.addEventListener(\"mousemove\", this._triggerModelBound);\r\n    document.addEventListener(\"mouseup\", this._onMouseUpBound);\r\n  }\r\n\r\n\r\n  _onMouseUp() {\r\n    document.removeEventListener(\"mouseup\", this._onMouseUpBound);\r\n    document.removeEventListener(\"mousemove\", this._triggerModelBound);\r\n  }\r\n\r\n\r\n  _triggerModel(event, onMouseDownEvent) {\r\n    event.preventDefault();\r\n\r\n    const orientation = this.sliderAdapter.getOptions().orientation;\r\n\r\n    const position = (orientation === \"horizontal\") ?\r\n      event.clientX - this.$slider.getBoundingClientRect().left :\r\n      event.clientY - this.$slider.getBoundingClientRect().top;\r\n\r\n    const sliderSize = (orientation === \"horizontal\") ?\r\n      this.$slider.getBoundingClientRect().width :\r\n      this.$slider.getBoundingClientRect().height;\r\n\r\n    const proportion = position / sliderSize * 100;\r\n    const newValue = this._calcValue(proportion);\r\n\r\n    const currentValues = this.sliderAdapter.getOptions().values.slice();\r\n    const onMouseDownEventTarget = onMouseDownEvent && onMouseDownEvent.target;\r\n    const onMouseDownEventTargetIndex = this.$handleGroups.findIndex(\r\n      ($handleGroup) => $handleGroup.contains(onMouseDownEventTarget)\r\n    );\r\n\r\n    if ( onMouseDownEventTargetIndex !== -1 ) {\r\n      currentValues.splice(onMouseDownEventTargetIndex, 1, newValue);\r\n\r\n      this.sliderAdapter.update({values: currentValues});\r\n    }\r\n\r\n    if (event.target === this.$base) {\r\n      this.sliderAdapter.update({values: newValue});\r\n    }\r\n  }\r\n\r\n\r\n  _calcValue(proportion) {\r\n    const boundaries = this.sliderAdapter.getOptions().boundaries;\r\n\r\n    return translateProportionIntoValue(proportion, boundaries);\r\n  }\r\n\r\n}\r\n","import {SliderModel} from \"./SliderModel\";\r\nimport {SliderAdapter} from \"./SliderAdapter\";\r\nimport {SliderUI} from \"./SliderUI\";\r\n\r\n\r\nexport const sliderFactory = {\r\n  createModel(...args) {\r\n    return new SliderModel(...args);\r\n  },\r\n\r\n  createAdapter(...args) {\r\n    return new SliderAdapter(...args);\r\n  },\r\n\r\n  createUI(...args) {\r\n    return new SliderUI(...args);\r\n  }\r\n};\r\n","import { sliderFactory } from \"./SliderFactory\";\r\n\r\n/**\r\n * This object represents API for the slider.\r\n * All interactions with the slider must happen only through it.\r\n */\r\nexport const slider = {\r\n  _factory: sliderFactory,\r\n  _parentsMap: new WeakMap(),\r\n\r\n  /**\r\n   * Create slider instance.\r\n   *\r\n   * @param {HTMLElement} $parent The element slider to be inserted in.\r\n   * @param {object} options The options of the slider.\r\n   */\r\n  create($parent, options) {\r\n    const sliderModel = this._factory.createModel(options);\r\n    const sliderAdapter = this._factory.createAdapter(sliderModel);\r\n    const sliderUi = this._factory.createUI($parent, sliderAdapter);\r\n\r\n    const sliderUiBoundedUpdate = sliderUi.update.bind(sliderUi);\r\n    sliderAdapter.addSubscriber(\"update\", sliderUiBoundedUpdate);\r\n\r\n    this._parentsMap.set($parent, {\r\n      sliderModel,\r\n      sliderAdapter,\r\n      sliderUi,\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Returns the slider instance current options. Non-primitive values are references.\r\n   *\r\n   * @param {HTMLElement} $parent The element the slider is inserted in.\r\n   *\r\n   * @returns {object} options The current options of the slider.\r\n   */\r\n  getOptions($parent) {\r\n    return this._parentsMap.get($parent).sliderAdapter.getOptions();\r\n  },\r\n\r\n  /**\r\n   * Set the slider instance options.\r\n   *\r\n   * @param {HTMLElement} $parent The element the slider is inserted in.\r\n   * @param {object} options The options to be set to the slider.\r\n   *\r\n   */\r\n  setOptions($parent, options) {\r\n    this._parentsMap.get($parent).sliderAdapter.update(options);\r\n  },\r\n\r\n};\r\n"]}